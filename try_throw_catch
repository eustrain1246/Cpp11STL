
Copyright [2020] [李兴鑫]
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.

//writer:eustrain(李兴鑫)
//Data:2019/12/30
//C++异常的基础使用
//2020年7月21日移至LearnCpp
#include<iostream>//输入输出流
#include<string>//字符串类
using namespace std;
class DEBUG//定义异常对象
{
public:
	//构造函数	注：异常处理中catch块无法通过构造函数进行隐式类型转换来捕捉其他类型的异常对象
	DEBUG(const string error) :error(error) { cout << "DEBUG:\t" << error << endl; }//保存错误信息
	//检测是否被拷贝，并在拷贝后的数据上加一个"s"
	DEBUG(const DEBUG& old) :error(old.error + "s") 
	{ cout << "Copyed DEBUG:\t" << old.error << endl; }//拷贝构造函数
	//检测是否被移动,并在移动后的数据后面加上一个"m"
	DEBUG(const DEBUG&& old)noexcept :error(old.error + "m")//给函数末尾加上noexcept，表示该函数不会抛出异常，在使用异常处理时可以节约时间
	{ cout << "Moved DEBUG:\t" << old.error << endl; }//移动构造函数
	const string& errorData()const { return error; }//输出错误信息
	//析构函数
	~DEBUG(){cout << "~DEBUG:\t" << error << endl;}//析构函数会被执行两(三)遍？？？
private:
	string error;//字符串保存异常信息(这里用字符串是为了测试方便，可以用枚举或者直接用整形什么的)
};
DEBUG global("233");//测试用全局对象
void f(string s)//一个可能抛出异常的函数
{
	DEBUG test("A loacl object");
	//*************************1、临时对象********************************************
//	throw(DEBUG(s));//抛出临时对象
	//↑此处产生了一个“匿名”对象，并将这个匿名的临时对象Copy到catch的形参中(传到catch中)，编译器不会对这个步骤做任何优化(因为一般情况下，编译器会优化掉匿名对象，以增加效率)
	//然后再释放local内存，却不释放这个临时对象(这个临时对象的生命周期将会持续到catch块结束)
	//因为可能catch捕捉的是一个引用，若释放了这个对象，就会捕获到一个非法的引用
	//以上均发生在catch语句被调用前。
	//※※※※※※※throw+catch实质不是简单的函数调用，比如无法通过构造函数进行自动类型转换※※※※※※※
	//*************************2、local对象*******************************************
//	DEBUG loacl(s);//测试用栈对象
//	throw(loacl);//抛出栈对象
	//此处调用移动构造函数产生一个临时对象再传给catch，然后正常释放local内存
	//如果catch捕捉的是一个对象即不是引用，会出现依次调用移动构造函数、拷贝构造函数，并产生三个对象的情况。
	//*************************3、global对象******************************************
//	throw(global);//抛出全局对象
	//调用拷贝构造函数产生一个临时对象再传给catch，然后再正常释放loacl内存
	//catch捕捉的如果不是引用，那么总共会调用两次拷贝构造函数，产生三个对象。
	//*****************************总结***********************************************
	//2、3都会调用1的部分，即都会产生一个临时对象
	//heap(堆)对象不建议作为异常对象，因为特别容易忘记delete
	//但是可以使用auto_ptr等智能指针，因为栈对象生命结束时已经完成了对象的移动或拷贝
}
#if 0//这个函数无法真实模拟出throw-catch的实际情况
void Exception(DEBUG d)//模拟throw-catch的一个函数
{
	cout << "Catched error:\t" << d.errorData() << endl;
}
#endif
int main()
{
	//try-throw-catch会让运行耗时大约延长4.1%~6.3%,具体基于编译器
	//只有try块内的throw会被catch捕捉，所以try块内写可能出现throw的代码
	//throw可以抛出所有类型的数据，不限于类，也可以是基本数据类型或者是结构体类型或者枚举类型什么的
	try {//这里写可能会抛出异常的代码
		//throw语句执行后，会立即锁住所有数据，然后依次向后"读"代码，并寻找try块的结尾部分
		//并一层一层地跳出函数(如果当前函数的接下来部分没有找到的话)
		//如果跑到main函数的结尾都没有找到try结尾，那么程序会中止。
		f("233");
	}
	//catch块必须接在try块后，try块也必须放在catch块前，中间不能夹杂其他代码
	//try-throw-catch的执行类似于每个case语句结尾都加上了break的switch-case语句
	//基类参数可以捕捉派生类参数，这里没有进行验证
	catch (DEBUG d)	//建议用引用，不建议直接传值，传值会多产生一个对象
			//但是无论传值还是传引用都不会影响到被传的对象，原因见函数f的内容
			//但是不能用const修饰，而且参数不能写右值引用※※※※※※※
			//catch块的调用像一般函数调用一样
	{
		cout << "Catched error:\t" << d.errorData() << endl;
		//释放参数，再释放匿名对象，与未优化的函数调用几乎相同,所以使用引用作为参数，可以避免出现两个对象。
		//。。。对异常的其他处理
	}
	catch (int num)//因为没有抛出int的throw语句，所以这个catch块永远不会执行
	{
		cout << "Catched error:\t" << num << endl;
	}
}
